function Application(model){    var pageProcessFactory = defaultPageProcessFactory;    var headerProcessFactory = defaultHeaderProcessFactory;    var footerProcessFactory = defaultFooterProcessFactory;    var menutext = '';	    function defaultPageProcessFactory(model, app, page)    {        return function(req, res) { res.write(page.content); };    }    function defaultHeaderProcessFactory(model, app, page)    {        if (!model.header)            return null;                    if (model.header.indexOf('${') < 0)            return function(req, res) { res.write(model.header); };                    return function(req, res) {            var header = model.header                .replace(/\${pagetitle}/g, page.title)                .replace(/\${sitetitle}/g, model.title)                .replace(/\${topmenu}/g, menutext);                            res.write(header);        };    }    function defaultFooterProcessFactory(model, app, page)    {        if (!model.footer)            return null;                    if (model.footer.indexOf('${') < 0)            return function(req, res) { res.write(model.footer); };                    return function(req, res) {            var footer = model.footer                .replace(/\${pagetitle}/g, page.title)                .replace(/\${sitetitle}/g, model.title)                            res.write(footer);        };    }	function registerPage(app, page)	{        var footerProcess = footerProcessFactory(model, this, page);        var headerProcess = headerProcessFactory(model, this, page);        var pageProcess = pageProcessFactory(model, this, page);		app.get(page.url, function(req, res) {            if (headerProcess)                headerProcess(req, res);                            pageProcess(req, res);                        if (footerProcess)                footerProcess(req, res);                            res.end();        });	}	function registerPages(app, pages)	{			var npages = pages.length;				for (var k = 0; k < npages; k++)			registerPage(app, pages[k]);	}		this.register = function(app)	{		if (model.pages)			registerPages(app, model.pages);	}		this.pageProcessFactory = function(fn)	{        pageProcessFactory = fn;                return this;	}}exports.createApplication = function(model) { return new Application(model); };